package main

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"go_project/store"
	"log"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	client, err := ethclient.Dial("https://sepolia.infura.io/v3/5e8e4dda12b048d087bbddc2b9b495e4")
	if err != nil {
		log.Fatal(err)
	}

	privateKey, err := crypto.HexToECDSA("xxxxxx")
	if err != nil {
		log.Fatal(err)
	}

	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress) // 生成的新钱包是nonce 0 ，没测试币也部署不了，所以用自己地址
	if err != nil {
		log.Fatal(err)
	}

	gasPrice, err := client.SuggestGasPrice(context.Background()) // 633570824 = 0x25c38608
	if err != nil {
		log.Fatal(err)
	}

	chainID, err := client.NetworkID(context.Background()) // 11155111
	if err != nil {
		log.Fatal(err)
	}

	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, chainID)
	if err != nil {
		log.Fatal(err)
	}

	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)     // in wei 往合约充值eth
	auth.GasLimit = uint64(300000) // gas单位限制
	auth.GasPrice = gasPrice       // 每gas的价格

	input := "1.0"
	address, tx, instance, err := store.DeployStore(auth, client, input)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(address.Hex())   // 合约地址 0xEfa302fE4e259e239b1Dc8bA20D591a512d63E7A  合约得等部署完后才查的到
	fmt.Println(tx.Hash().Hex()) // 交易哈希 0x72a53416253a561a69c238ea2d1fb68df1c7220829352dbd6abafd1e364f1247
	// https://sepolia.etherscan.io/tx/0x72a53416253a561a69c238ea2d1fb68df1c7220829352dbd6abafd1e364f1247 执行成功交易地址

	_ = instance
}
