package main

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"go_project/store"
	"log"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

// var key = "0x0000000000000000000000000000000000000000000000000000000000001111" //66长度，不算0x就是64长度，是byte[]32 的输入
// var value = "0x0000000000000000000000000000000000000000000000000000000000002222"
// 写入合约需要gas费，就是一个正常交易了,这里调用合约并没有转账
func main() {
	client, err := ethclient.Dial("https://sepolia.infura.io/v3/5e8e4dda12b048d087bbddc2b9b495e4")
	if err != nil {
		log.Fatal(err)
	}

	privateKey, err := crypto.HexToECDSA("xxxxxx")
	if err != nil {
		log.Fatal(err)
	}

	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		log.Fatal(err)
	}

	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		log.Fatal(err)
	}

	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, big.NewInt(11155111)) // sepolia chain id
	if err != nil {
		log.Fatal(err)
	}

	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)     // in wei
	auth.GasLimit = uint64(300000) // in units
	auth.GasPrice = gasPrice

	// 合约地址
	address := common.HexToAddress("0x734A65E7990409baFef3C5b7950b5d2ebF0674b1")
	instance, err := store.NewStore(address, client)
	if err != nil {
		log.Fatal(err)
	}

	key := [32]byte{}
	value := [32]byte{}
	copy(key[:], []byte("111"))
	copy(value[:], []byte("222"))

	tx, err := instance.SetItem(auth, key, value)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("tx sent: %s", tx.Hash().Hex()) // tx sent: 0x8d490e535678e9a24360e955d75b27ad307bdfb97a1dca51d0f3035dcee3e870

	callOpt := &bind.CallOpts{Context: context.Background()}

	result, err := instance.Items(callOpt, key)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(string(result[:])) // "bar"
}
